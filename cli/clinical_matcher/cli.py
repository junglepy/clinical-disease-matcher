#!/usr/bin/env python3
"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Clinical Matcher
"""

import click
import asyncio
from pathlib import Path
from .processor import ClinicalDataProcessor, test_column_detection
from .config import load_config, save_config, get_config_value
from . import __version__


@click.group()
@click.version_option(version=__version__)
def cli():
    """Clinical Disease Matcher - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    
    –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤ —Å –∫–æ–¥–∞–º–∏ OMIM/MONDO.
    """
    pass


@cli.command()
@click.argument('files', nargs=-1, type=click.Path(exists=True), required=True)
@click.option('--api-url', default=None, help='URL API —Å–µ—Ä–≤–∏—Å–∞')
@click.option('--output-dir', type=click.Path(), help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
@click.option('--max-concurrent', type=int, default=None, help='–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã')
@click.option('--test-columns', is_flag=True, help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã')
def process(files, api_url, output_dir, max_concurrent, test_columns):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    
    –ü—Ä–∏–º–µ—Ä—ã:
    
    \b
    clinical-matcher process –¥–∞–Ω–Ω—ã–µ.xlsx
    clinical-matcher process --output-dir results/ —Ñ–∞–π–ª1.xlsx —Ñ–∞–π–ª2.csv
    clinical-matcher process --test-columns –¥–∞–Ω–Ω—ã–µ.xlsx
    """
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config()
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if api_url:
        config['api_url'] = api_url
    if max_concurrent is not None:
        config['max_concurrent'] = max_concurrent
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API URL
    if not config.get('api_url'):
        click.echo("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API URL", err=True)
        click.echo("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: clinical-matcher configure --api-url <URL>", err=True)
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    processor = ClinicalDataProcessor(
        api_url=config['api_url'],
        max_concurrent=config.get('max_concurrent', 5)
    )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    click.echo(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API: {config['api_url']}")
    click.echo(f"üìä –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {config.get('max_concurrent', 5)}\n")
    
    async def process_files():
        total_files = len(files)
        processed = 0
        
        for file_path in files:
            file_path = Path(file_path)
            processed += 1
            
            click.echo(f"üìÑ [{processed}/{total_files}] –û–±—Ä–∞–±–æ—Ç–∫–∞: {file_path.name}")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if output_dir:
                output_dir_path = Path(output_dir)
                output_dir_path.mkdir(parents=True, exist_ok=True)
                if file_path.suffix.lower() == '.csv':
                    output_path = output_dir_path / f"{file_path.stem}_processed.csv"
                else:
                    output_path = output_dir_path / f"{file_path.stem}_processed.xlsx"
            else:
                output_path = None
            
            try:
                stats = await processor.process_excel(
                    file_path,
                    output_path,
                    test_columns=test_columns
                )
                
                if test_columns:
                    click.echo(f"  ‚úì –î–∏–∞–≥–Ω–æ–∑: {stats.get('diagnosis_column', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
                    click.echo(f"  ‚úì –ì–µ–Ω: {stats.get('gene_column', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
                else:
                    if 'error' not in stats:
                        click.echo(f"  ‚úì –£—Å–ø–µ—à–Ω–æ: {stats['successful']} –∏–∑ {stats['processed']}")
                        if stats['not_found'] > 0:
                            click.echo(f"  ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {stats['not_found']}")
                        if stats['errors'] > 0:
                            click.echo(f"  ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}")
                
            except Exception as e:
                click.echo(f"  ‚ùå –û—à–∏–±–∫–∞: {str(e)}", err=True)
            
            click.echo()
    
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    asyncio.run(process_files())
    click.echo("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


@cli.command()
@click.option('--api-url', prompt='API URL', help='URL —Å–µ—Ä–≤–µ—Ä–∞ API')
def configure(api_url):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API"""
    save_config({'api_url': api_url})
    click.echo(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    click.echo(f"   API URL: {api_url}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    click.echo("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    async def check_api():
        try:
            import aiohttp
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{api_url}/api/v1/health",
                    timeout=aiohttp.ClientTimeout(total=5)
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        click.echo(f"‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω: {data.get('status', 'ok')}")
                        if 'model' in data:
                            click.echo(f"   –ú–æ–¥–µ–ª—å: {data['model']}")
                    else:
                        click.echo(f"‚ö†Ô∏è  API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status}")
        except Exception as e:
            click.echo(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {str(e)}", err=True)
            click.echo("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω", err=True)
    
    asyncio.run(check_api())


@cli.command()
def test():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    click.echo("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤...\n")
    try:
        test_column_detection()
        click.echo("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    except AssertionError as e:
        click.echo(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {str(e)}", err=True)
    except Exception as e:
        click.echo(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", err=True)


@cli.command()
def config():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    config = load_config()
    click.echo("üìã –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n")
    for key, value in config.items():
        click.echo(f"   {key}: {value}")
    
    config_path = Path.home() / ".config" / "clinical-matcher" / "config.json"
    click.echo(f"\nüìÅ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_path}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    cli()


if __name__ == '__main__':
    main()